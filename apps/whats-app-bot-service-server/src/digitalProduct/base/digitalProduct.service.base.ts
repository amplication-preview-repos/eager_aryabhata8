/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DigitalProduct as PrismaDigitalProduct,
  Order as PrismaOrder,
} from "@prisma/client";

export class DigitalProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DigitalProductCountArgs, "select">
  ): Promise<number> {
    return this.prisma.digitalProduct.count(args);
  }

  async digitalProducts<T extends Prisma.DigitalProductFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DigitalProductFindManyArgs>
  ): Promise<PrismaDigitalProduct[]> {
    return this.prisma.digitalProduct.findMany<Prisma.DigitalProductFindManyArgs>(
      args
    );
  }
  async digitalProduct<T extends Prisma.DigitalProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DigitalProductFindUniqueArgs>
  ): Promise<PrismaDigitalProduct | null> {
    return this.prisma.digitalProduct.findUnique(args);
  }
  async createDigitalProduct<T extends Prisma.DigitalProductCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DigitalProductCreateArgs>
  ): Promise<PrismaDigitalProduct> {
    return this.prisma.digitalProduct.create<T>(args);
  }
  async updateDigitalProduct<T extends Prisma.DigitalProductUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DigitalProductUpdateArgs>
  ): Promise<PrismaDigitalProduct> {
    return this.prisma.digitalProduct.update<T>(args);
  }
  async deleteDigitalProduct<T extends Prisma.DigitalProductDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DigitalProductDeleteArgs>
  ): Promise<PrismaDigitalProduct> {
    return this.prisma.digitalProduct.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.digitalProduct
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }
}
